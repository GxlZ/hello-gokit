// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 7dc4d5d85c
// Version Date: 2018年 5月28日 星期一 22时12分59秒 UTC

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "hello-gokit/pb"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC HelloServer.
func MakeGRPCServer(endpoints Endpoints) pb.HelloServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	return &grpcServer{
		// hello

		hellov1: grpctransport.NewServer(
			endpoints.HelloV1Endpoint,
			DecodeGRPCHelloV1Request,
			EncodeGRPCHelloV1Response,
			serverOptions...,
		),
	}
}

// grpcServer implements the HelloServer interface
type grpcServer struct {
	hellov1 grpctransport.Handler
}

// Methods for grpcServer to implement HelloServer interface

func (s *grpcServer) HelloV1(ctx context.Context, req *pb.Req) (*pb.Resp, error) {
	_, rep, err := s.hellov1.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Resp), nil
}

// Server Decode

// DecodeGRPCHelloV1Request is a transport/grpc.DecodeRequestFunc that converts a
// gRPC hellov1 request to a user-domain hellov1 request. Primarily useful in a server.
func DecodeGRPCHelloV1Request(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.Req)
	return req, nil
}

// Server Encode

// EncodeGRPCHelloV1Response is a transport/grpc.EncodeResponseFunc that converts a
// user-domain hellov1 response to a gRPC hellov1 reply. Primarily useful in a server.
func EncodeGRPCHelloV1Response(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Resp)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
